diff -Naur linux-2.6.18.orig/include/linux/compiler-gcc5.h linux-2.6.18/include/linux/compiler-gcc5.h
--- linux-2.6.18.orig/include/linux/compiler-gcc5.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.18/include/linux/compiler-gcc5.h	2017-08-24 09:51:12.227127661 +0200
@@ -0,0 +1,76 @@
+#ifndef __LINUX_COMPILER_H
+#error "Please don't include <linux/compiler-gcc5.h> directly, include <linux/compiler.h> instead."
+#endif
+
+#include <linux/compiler-gcc.h>
+
+#define __used				__attribute__((__used__))
+#define __attribute_used__		__attribute__((__used__))
+#define __attribute_unused__		__attribute__((__unused__))
+#define __must_check			__attribute__((warn_unused_result))
+
+#define __compiler_offsetof(a, b)	__builtin_offsetof(a, b)
+
+/* Mark functions as cold. gcc will assume any path leading to a call
+   to them will be unlikely.  This means a lot of manual unlikely()s
+   are unnecessary now for any paths leading to the usual suspects
+   like BUG(), printk(), panic() etc. [but let's keep them for now for
+   older compilers]
+
+   gcc also has a __attribute__((__hot__)) to move hot functions into
+   a special section, but I don't see any sense in this right now in
+   the kernel context */
+#define __cold			__attribute__((__cold__))
+
+#define __UNIQUE_ID(prefix) __PASTE(__PASTE(__UNIQUE_ID_, prefix), __COUNTER__)
+
+#ifndef __CHECKER__
+# define __compiletime_warning(message) __attribute__((warning(message)))
+# define __compiletime_error(message) __attribute__((error(message)))
+#endif /* __CHECKER__ */
+
+/*
+ * Mark a position in code as unreachable.  This can be used to
+ * suppress control flow warnings after asm blocks that transfer
+ * control elsewhere.
+ */
+#define unreachable() __builtin_unreachable()
+
+/* Mark a function definition as prohibited from being cloned. */
+#define __noclone	__attribute__((__noclone__))
+
+/*
+ * Tell the optimizer that something else uses this function or variable.
+ */
+#define __visible __attribute__((externally_visible))
+
+/* Fixes for very old kernel */
+#ifdef CONFIG_FORCED_INLINING
+# undef inline
+# undef __inline__
+# undef __inline
+# define inline                 inline          __attribute__((always_inline))
+# define __inline__             __inline__      __attribute__((always_inline))
+# define __inline               __inline        __attribute__((always_inline))
+#endif
+
+#define __always_inline         inline __attribute__((always_inline))
+
+/*
+ * GCC 'asm goto' miscompiles certain code sequences:
+ *
+ *   http://gcc.gnu.org/bugzilla/show_bug.cgi?id=58670
+ *
+ * Work it around via a compiler barrier quirk suggested by Jakub Jelinek.
+ *
+ * (asm goto is automatically volatile - the naming reflects this.)
+ */
+#define asm_volatile_goto(x...)	do { asm goto(x); asm (""); } while (0)
+
+#ifdef CONFIG_ARCH_USE_BUILTIN_BSWAP
+#define __HAVE_BUILTIN_BSWAP32__
+#define __HAVE_BUILTIN_BSWAP64__
+#define __HAVE_BUILTIN_BSWAP16__
+#endif /* CONFIG_ARCH_USE_BUILTIN_BSWAP */
+
+#define KASAN_ABI_VERSION 4
diff -Naur linux-2.6.18.orig/include/linux/compiler-gcc6.h linux-2.6.18/include/linux/compiler-gcc6.h
--- linux-2.6.18.orig/include/linux/compiler-gcc6.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.18/include/linux/compiler-gcc6.h	2017-08-24 09:51:12.226127686 +0200
@@ -0,0 +1,76 @@
+#ifndef __LINUX_COMPILER_H
+#error "Please don't include <linux/compiler-gcc6.h> directly, include <linux/compiler.h> instead."
+#endif
+
+#include <linux/compiler-gcc.h>
+
+#define __used				__attribute__((__used__))
+#define __attribute_used__		__attribute__((__used__))
+#define __attribute_unused__		__attribute__((__unused__))
+#define __must_check			__attribute__((warn_unused_result))
+
+#define __compiler_offsetof(a, b)	__builtin_offsetof(a, b)
+
+/* Mark functions as cold. gcc will assume any path leading to a call
+   to them will be unlikely.  This means a lot of manual unlikely()s
+   are unnecessary now for any paths leading to the usual suspects
+   like BUG(), printk(), panic() etc. [but let's keep them for now for
+   older compilers]
+
+   gcc also has a __attribute__((__hot__)) to move hot functions into
+   a special section, but I don't see any sense in this right now in
+   the kernel context */
+#define __cold			__attribute__((__cold__))
+
+#define __UNIQUE_ID(prefix) __PASTE(__PASTE(__UNIQUE_ID_, prefix), __COUNTER__)
+
+#ifndef __CHECKER__
+# define __compiletime_warning(message) __attribute__((warning(message)))
+# define __compiletime_error(message) __attribute__((error(message)))
+#endif /* __CHECKER__ */
+
+/*
+ * Mark a position in code as unreachable.  This can be used to
+ * suppress control flow warnings after asm blocks that transfer
+ * control elsewhere.
+ */
+#define unreachable() __builtin_unreachable()
+
+/* Mark a function definition as prohibited from being cloned. */
+#define __noclone	__attribute__((__noclone__))
+
+/*
+ * Tell the optimizer that something else uses this function or variable.
+ */
+#define __visible __attribute__((externally_visible))
+
+/* Fixes for very old kernel */
+#ifdef CONFIG_FORCED_INLINING
+# undef inline
+# undef __inline__
+# undef __inline
+# define inline                 inline          __attribute__((always_inline))
+# define __inline__             __inline__      __attribute__((always_inline))
+# define __inline               __inline        __attribute__((always_inline))
+#endif
+
+#define __always_inline         inline __attribute__((always_inline))
+
+/*
+ * GCC 'asm goto' miscompiles certain code sequences:
+ *
+ *   http://gcc.gnu.org/bugzilla/show_bug.cgi?id=58670
+ *
+ * Work it around via a compiler barrier quirk suggested by Jakub Jelinek.
+ *
+ * (asm goto is automatically volatile - the naming reflects this.)
+ */
+#define asm_volatile_goto(x...)	do { asm goto(x); asm (""); } while (0)
+
+#ifdef CONFIG_ARCH_USE_BUILTIN_BSWAP
+#define __HAVE_BUILTIN_BSWAP32__
+#define __HAVE_BUILTIN_BSWAP64__
+#define __HAVE_BUILTIN_BSWAP16__
+#endif /* CONFIG_ARCH_USE_BUILTIN_BSWAP */
+
+#define KASAN_ABI_VERSION 4
diff -Naur linux-2.6.18.orig/include/linux/compiler-gcc7.h linux-2.6.18/include/linux/compiler-gcc7.h
--- linux-2.6.18.orig/include/linux/compiler-gcc7.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.18/include/linux/compiler-gcc7.h	2017-08-24 09:52:24.855305493 +0200
@@ -0,0 +1,76 @@
+#ifndef __LINUX_COMPILER_H
+#error "Please don't include <linux/compiler-gcc7.h> directly, include <linux/compiler.h> instead."
+#endif
+
+#include <linux/compiler-gcc.h>
+
+#define __used				__attribute__((__used__))
+#define __attribute_used__		__attribute__((__used__))
+#define __attribute_unused__		__attribute__((__unused__))
+#define __must_check			__attribute__((warn_unused_result))
+
+#define __compiler_offsetof(a, b)	__builtin_offsetof(a, b)
+
+/* Mark functions as cold. gcc will assume any path leading to a call
+   to them will be unlikely.  This means a lot of manual unlikely()s
+   are unnecessary now for any paths leading to the usual suspects
+   like BUG(), printk(), panic() etc. [but let's keep them for now for
+   older compilers]
+
+   gcc also has a __attribute__((__hot__)) to move hot functions into
+   a special section, but I don't see any sense in this right now in
+   the kernel context */
+#define __cold			__attribute__((__cold__))
+
+#define __UNIQUE_ID(prefix) __PASTE(__PASTE(__UNIQUE_ID_, prefix), __COUNTER__)
+
+#ifndef __CHECKER__
+# define __compiletime_warning(message) __attribute__((warning(message)))
+# define __compiletime_error(message) __attribute__((error(message)))
+#endif /* __CHECKER__ */
+
+/*
+ * Mark a position in code as unreachable.  This can be used to
+ * suppress control flow warnings after asm blocks that transfer
+ * control elsewhere.
+ */
+#define unreachable() __builtin_unreachable()
+
+/* Mark a function definition as prohibited from being cloned. */
+#define __noclone	__attribute__((__noclone__))
+
+/*
+ * Tell the optimizer that something else uses this function or variable.
+ */
+#define __visible __attribute__((externally_visible))
+
+/* Fixes for very old kernel */
+#ifdef CONFIG_FORCED_INLINING
+# undef inline
+# undef __inline__
+# undef __inline
+# define inline                 inline          __attribute__((always_inline))
+# define __inline__             __inline__      __attribute__((always_inline))
+# define __inline               __inline        __attribute__((always_inline))
+#endif
+
+#define __always_inline         inline __attribute__((always_inline))
+
+/*
+ * GCC 'asm goto' miscompiles certain code sequences:
+ *
+ *   http://gcc.gnu.org/bugzilla/show_bug.cgi?id=58670
+ *
+ * Work it around via a compiler barrier quirk suggested by Jakub Jelinek.
+ *
+ * (asm goto is automatically volatile - the naming reflects this.)
+ */
+#define asm_volatile_goto(x...)	do { asm goto(x); asm (""); } while (0)
+
+#ifdef CONFIG_ARCH_USE_BUILTIN_BSWAP
+#define __HAVE_BUILTIN_BSWAP32__
+#define __HAVE_BUILTIN_BSWAP64__
+#define __HAVE_BUILTIN_BSWAP16__
+#endif /* CONFIG_ARCH_USE_BUILTIN_BSWAP */
+
+#define KASAN_ABI_VERSION 4
diff -Naur linux-2.6.18.orig/include/linux/compiler.h linux-2.6.18/include/linux/compiler.h
--- linux-2.6.18.orig/include/linux/compiler.h	2006-09-20 05:42:06.000000000 +0200
+++ linux-2.6.18/include/linux/compiler.h	2017-08-24 09:53:42.447358784 +0200
@@ -36,8 +36,14 @@
 
 #ifdef __KERNEL__
 
-#if __GNUC__ > 4
+#if __GNUC__ > 7
 #error no compiler-gcc.h file for this gcc version
+#elif __GNUC__ == 7
+# include <linux/compiler-gcc7.h>
+#elif __GNUC__ == 6
+# include <linux/compiler-gcc6.h>
+#elif __GNUC__ == 5
+# include <linux/compiler-gcc5.h>
 #elif __GNUC__ == 4
 # include <linux/compiler-gcc4.h>
 #elif __GNUC__ == 3
