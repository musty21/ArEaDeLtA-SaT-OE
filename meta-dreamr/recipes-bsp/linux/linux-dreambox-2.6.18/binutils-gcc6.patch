--- kernel-source/arch/mips/Makefile.orig	2016-11-08 02:07:24.593456621 +0100
+++ kernel-source/arch/mips/Makefile	2016-11-08 02:08:49.908085019 +0100
@@ -85,6 +85,15 @@
 LDFLAGS_vmlinux			+= -G 0 -static -n -nostdlib
 MODFLAGS			+= -mlong-calls
 
+#
+# pass -msoft-float to GAS if it supports it.  However on newer binutils
+# (specifically newer than 2.24.51.20140728) we then also need to explicitly
+# set ".set hardfloat" in all files which manipulate floating point registers.
+#
+ifneq ($(call as-option,-Wa$(comma)-msoft-float,),)
+	cflags-y		+= -DGAS_HAS_SET_HARDFLOAT -Wa,-msoft-float
+endif
+
 cflags-y += -ffreestanding
 
 #
--- kernel-source/include/asm-mips/asmmacro-32.h.orig	2016-11-08 02:10:28.796336094 +0100
+++ kernel-source/include/asm-mips/asmmacro-32.h	2016-11-08 02:15:57.398201523 +0100
@@ -34,6 +34,8 @@
 	.endm
 
 	.macro	fpu_save_single thread tmp=t0
+	.set push
+	SET_HARDFLOAT
 	cfc1	\tmp,  fcr31
 	swc1	$f0,  THREAD_FPR0(\thread)
 	swc1	$f1,  THREAD_FPR1(\thread)
@@ -68,6 +70,7 @@
 	swc1	$f30, THREAD_FPR30(\thread)
 	swc1	$f31, THREAD_FPR31(\thread)
 	sw	\tmp, THREAD_FCR31(\thread)
+	.set pop
 	.endm
 
 	.macro	fpu_restore_double thread status tmp=t0
@@ -92,6 +95,8 @@
 	.endm
 
 	.macro	fpu_restore_single thread tmp=t0
+	.set push
+	SET_HARDFLOAT
 	lw	\tmp, THREAD_FCR31(\thread)
 	lwc1	$f0,  THREAD_FPR0(\thread)
 	lwc1	$f1,  THREAD_FPR1(\thread)
@@ -126,6 +131,7 @@
 	lwc1	$f30, THREAD_FPR30(\thread)
 	lwc1	$f31, THREAD_FPR31(\thread)
 	ctc1	\tmp, fcr31
+	.set pop
 	.endm
 
 	.macro	cpu_save_nonscratch thread
--- kernel-source/include/asm-mips/mipsregs.h.orig	2016-11-08 02:30:48.234462074 +0100
+++ kernel-source/include/asm-mips/mipsregs.h	2016-11-08 02:39:14.285405685 +0100
@@ -1103,16 +1103,25 @@
 /*
  * Macros to access the floating point coprocessor control registers
  */
-#define read_32bit_cp1_register(source)                         \
+#define _read_32bit_cp1_register(source, gas_hardfloat)		\
 ({ int __res;                                                   \
 	__asm__ __volatile__(                                   \
 	".set\tpush\n\t"					\
 	".set\treorder\n\t"					\
+	"	"STR(gas_hardfloat)"			\n"	\
         "cfc1\t%0,"STR(source)"\n\t"                            \
 	".set\tpop"						\
         : "=r" (__res));                                        \
         __res;})
 
+#ifdef GAS_HAS_SET_HARDFLOAT
+#define read_32bit_cp1_register(source)					\
+	_read_32bit_cp1_register(source, .set hardfloat)
+#else
+#define read_32bit_cp1_register(source)					\
+	_read_32bit_cp1_register(source, )
+#endif
+
 #define rddsp(mask)							\
 ({									\
 	unsigned int __res;						\
--- kernel-source/include/asm-mips/fpregdef.h.orig	2016-11-08 02:26:17.611976563 +0100
+++ kernel-source/include/asm-mips/fpregdef.h	2016-11-08 02:28:00.115130316 +0100
@@ -14,6 +14,20 @@
 
 #include <asm/sgidefs.h>
 
+/*
+ * starting with binutils 2.24.51.20140729, MIPS binutils warn about mixing
+ * hardfloat and softfloat object files.  The kernel build uses soft-float by
+ * default, so we also need to pass -msoft-float along to GAS if it supports it.
+ * But this in turn causes assembler errors in files which access hardfloat
+ * registers.  We detect if GAS supports "-msoft-float" in the Makefile and
+ * explicitly put ".set hardfloat" where floating point registers are touched.
+ */
+#ifdef GAS_HAS_SET_HARDFLOAT
+#define SET_HARDFLOAT .set hardfloat
+#else
+#define SET_HARDFLOAT
+#endif
+
 #if _MIPS_SIM == _MIPS_SIM_ABI32
 
 /*
--- kernel-source/arch/mips/kernel/r2300_fpu.S.orig	2016-11-08 02:46:13.575755601 +0100
+++ kernel-source/arch/mips/kernel/r2300_fpu.S	2016-11-08 02:50:07.245263035 +0100
@@ -28,6 +28,8 @@
 	.set	mips1
 	/* Save floating point context */
 LEAF(_save_fp_context)
+	.set	push
+	SET_HARDFLOAT
 	li	v0, 0					# assume success
 	cfc1	t1,fcr31
 	EX(swc1	$f0,(SC_FPREGS+0)(a0))
@@ -65,6 +67,7 @@
 	EX(sw	t1,(SC_FPC_CSR)(a0))
 	cfc1	t0,$0				# implementation/version
 	jr	ra
+	.set	pop
 	.set	nomacro
 	 EX(sw	t0,(SC_FPC_EIR)(a0))
 	.set	macro
@@ -80,6 +83,8 @@
  * stack frame which might have been changed by the user.
  */
 LEAF(_restore_fp_context)
+	.set	push
+	SET_HARDFLOAT
 	li	v0, 0					# assume success
 	EX(lw t0,(SC_FPC_CSR)(a0))
 	EX(lwc1	$f0,(SC_FPREGS+0)(a0))
@@ -116,6 +121,7 @@
 	EX(lwc1	$f31,(SC_FPREGS+248)(a0))
 	jr	ra
 	 ctc1	t0,fcr31
+	.set	pop
 	END(_restore_fp_context)
 	.set	reorder
 
--- kernel-source/arch/mips/kernel/r2300_switch.S.orig	2016-11-08 02:51:22.846162448 +0100
+++ kernel-source/arch/mips/kernel/r2300_switch.S	2016-11-08 02:52:45.097876489 +0100
@@ -128,6 +128,9 @@
 
 #define FPU_DEFAULT  0x00000000
 
+	.set push
+	SET_HARDFLOAT
+
 LEAF(_init_fpu)
 	mfc0	t0, CP0_STATUS
 	li	t1, ST0_CU1
@@ -173,3 +176,5 @@
 	mtc1	t0, $f31
 	jr	ra
 	END(_init_fpu)
+
+	.set pop
--- kernel-source/arch/mips/kernel/r4k_fpu.S.orig	2016-11-08 03:02:02.956367795 +0100
+++ kernel-source/arch/mips/kernel/r4k_fpu.S	2016-11-08 03:17:43.570196465 +0100
@@ -19,8 +19,12 @@
 #include <asm/asm-offsets.h>
 #include <asm/regdef.h>
 
+/* preprocessor replaces the fp in ".set fp=64" with $30 otherwise */
+#undef fp
+
 	.macro	EX insn, reg, src
 	.set	push
+	SET_HARDFLOAT
 	.set	nomacro
 .ex\@:	\insn	\reg, \src
 	.set	pop
@@ -33,10 +37,15 @@
 	.set	mips3
 
 LEAF(_save_fp_context)
+	.set	push
+	SET_HARDFLOAT
 	cfc1	t1, fcr31
+	.set	pop
 
 #ifdef CONFIG_64BIT
 	/* Store the 16 odd double precision registers */
+ 	.set	push
+	SET_HARDFLOAT
 	EX	sdc1 $f1, SC_FPREGS+8(a0)
 	EX	sdc1 $f3, SC_FPREGS+24(a0)
 	EX	sdc1 $f5, SC_FPREGS+40(a0)
@@ -56,6 +65,8 @@
 #endif
 
 	/* Store the 16 even double precision registers */
+	.set push
+	SET_HARDFLOAT
 	EX	sdc1 $f0, SC_FPREGS+0(a0)
 	EX	sdc1 $f2, SC_FPREGS+16(a0)
 	EX	sdc1 $f4, SC_FPREGS+32(a0)
@@ -75,11 +86,14 @@
 	EX	sw t1, SC_FPC_CSR(a0)
 	jr	ra
 	 li	v0, 0					# success
+	.set pop
 	END(_save_fp_context)
 
 #ifdef CONFIG_MIPS32_COMPAT
 	/* Save 32-bit process floating point context */
 LEAF(_save_fp_context32)
+	.set push
+	SET_HARDFLOAT
 	cfc1	t1, fcr31
 
 	EX	sdc1 $f0, SC32_FPREGS+0(a0)
@@ -101,6 +115,7 @@
 	EX	sw t1, SC32_FPC_CSR(a0)
 	cfc1	t0, $0				# implementation/version
 	EX	sw t0, SC32_FPC_EIR(a0)
+	.set pop
 
 	jr	ra
 	 li	v0, 0					# success
@@ -113,6 +128,8 @@
  *  - cp1 status/control register
  */
 LEAF(_restore_fp_context)
+	.set push
+	SET_HARDFLOAT
 	EX	lw t0, SC_FPC_CSR(a0)
 #ifdef CONFIG_64BIT
 	EX	ldc1 $f1, SC_FPREGS+8(a0)
@@ -149,12 +166,15 @@
 	EX	ldc1 $f28, SC_FPREGS+224(a0)
 	EX	ldc1 $f30, SC_FPREGS+240(a0)
 	ctc1	t0, fcr31
+	.set pop
 	jr	ra
 	 li	v0, 0					# success
 	END(_restore_fp_context)
 
 #ifdef CONFIG_MIPS32_COMPAT
 LEAF(_restore_fp_context32)
+	.set push
+	SET_HARDFLOAT
 	/* Restore an o32 sigcontext.  */
 	EX	lw t0, SC32_FPC_CSR(a0)
 	EX	ldc1 $f0, SC32_FPREGS+0(a0)
@@ -176,6 +196,7 @@
 	ctc1	t0, fcr31
 	jr	ra
 	 li	v0, 0					# success
+	.set pop
 	END(_restore_fp_context32)
 #endif
 
--- kernel-source/arch/mips/kernel/branch.c.orig	2016-11-08 02:39:51.472372436 +0100
+++ kernel-source/arch/mips/kernel/branch.c	2016-11-08 02:42:06.271627006 +0100
@@ -176,7 +176,7 @@
 	case cop1_op:
 		preempt_disable();
 		if (is_fpu_owner())
-			asm volatile("cfc1\t%0,$31" : "=r" (fcr31));
+			fcr31 = read_32bit_cp1_register(CP1_STATUS);
 		else
 			fcr31 = current->thread.fpu.fcr31;
 		preempt_enable();
--- kernel-source/arch/mips/kernel/r6000_fpu.S.orig	2016-11-08 03:45:06.213364074 +0100
+++ kernel-source/arch/mips/kernel/r6000_fpu.S	2016-11-08 03:46:30.326017458 +0100
@@ -18,6 +18,8 @@
 
 	.set	noreorder
 	.set	mips2
+	.set	push
+	SET_HARDFLOAT
 	/* Save floating point context */
 	LEAF(_save_fp_context)
 	mfc0	t0,CP0_STATUS
@@ -85,3 +87,5 @@
 1:	jr	ra
 	 nop
 	END(_restore_fp_context)
+
+	.set pop	/* SET_HARDFLOAT */
--- kernel-source/arch/mips/kernel/genex.S.orig	2016-11-08 02:43:05.172990414 +0100
+++ kernel-source/arch/mips/kernel/genex.S	2016-11-08 03:18:07.856520218 +0100
@@ -301,12 +301,15 @@
 	.endm
 
 	.macro	__build_clear_fpe
+	.set push
+	SET_HARDFLOAT
 	cfc1	a1, fcr31
 	li	a2, ~(0x3f << 12)
 	and	a2, a1
 	ctc1	a2, fcr31
 	TRACE_IRQS_ON
 	STI
+	.set pop
 	.endm
 
 	.macro	__build_clear_ade
--- a/arch/mips/kernel/r4k_switch.S.orig	2016-11-08 04:03:38.193341400 +0100
+++ b/arch/mips/kernel/r4k_switch.S	2016-11-08 04:04:23.450078774 +0100
@@ -23,6 +23,9 @@
 
 #include <asm/asmmacro.h>
 
+/* preprocessor replaces the fp in ".set fp=64" with $30 otherwise */
+#undef fp
+
 /*
  * Offset to the current process status flags, the first 32 bytes of the
  * stack are not used.
@@ -45,6 +48,8 @@
  */
 	.align	5
 	LEAF(resume)
+	.set	push
+	SET_HARDFLOAT
 #ifndef CONFIG_CPU_HAS_LLSC
 	sw	zero, ll_bit
 #endif
@@ -128,28 +133,35 @@
 #endif /* CONFIG_MIPS_MT_SMTC */
 	move	v0, a0
 	jr	ra
+	.set 	pop
 	END(resume)
 
 /*
  * Save a thread's fp context.
  */
 LEAF(_save_fp)
+	.set	push
+	SET_HARDFLOAT
 #ifdef CONFIG_64BIT
 	mfc0	t0, CP0_STATUS
 #endif
 	fpu_save_double a0 t0 t1		# clobbers t1
 	jr	ra
+	.set	pop
 	END(_save_fp)
 
 /*
  * Restore a thread's fp context.
  */
 LEAF(_restore_fp)
+	.set	push
+	SET_HARDFLOAT
 #ifdef CONFIG_64BIT
 	mfc0	t0, CP0_STATUS
 #endif
 	fpu_restore_double a0 t0 t1		# clobbers t1
 	jr	ra
+	.set	pop
 	END(_restore_fp)
 
 /*
@@ -162,6 +174,9 @@
 
 #define FPU_DEFAULT  0x00000000
 
+	.set push
+	SET_HARDFLOAT
+
 LEAF(_init_fpu)
 #ifdef CONFIG_MIPS_MT_SMTC
 	/* Rather than manipulate per-VPE Status, set per-TC bit in TCStatus */
@@ -260,3 +275,5 @@
 #endif
 	jr	ra
 	END(_init_fpu)
+
+	.set pop	/* SET_HARDFLOAT */
--- a/arch/mips/brcmstb/common/bmips-smp.c.orig	2016-11-11 13:48:22.065189023 +0100
+++ b/arch/mips/brcmstb/common/bmips-smp.c	2016-11-11 13:50:54.316944183 +0100
@@ -43,6 +43,9 @@
 #include <asm/mipsregs.h>
 #include <asm/brcmstb/common/brcmstb.h>
 
+/* preprocessor replaces the fp in ".set fp=64" with $30 otherwise */
+#undef fp
+
 // used for passing boot arguments to TP1
 struct BootConfig {
 	unsigned long signature;
@@ -209,6 +212,9 @@
 
 	__asm__ __volatile__(
 	"	.set	push\n"
+#ifdef GAS_HAS_SET_HARDFLOAT
+	"	.set	hardfloat\n"
+#endif
 	"	.set	reorder\n"
 
 	/* enable FPU and initialize FPU registers */
