diff --git a/configure.ac b/configure.ac
index 90f2987..7284c52 100644
--- a/configure.ac
+++ b/configure.ac
@@ -236,6 +236,13 @@ if test "$vuplus" = "yes"; then
 	AC_DEFINE([VUPLUS],[1],[Define to 1 for vuplus ])
 fi
 
+AC_ARG_WITH(spark,
+	AS_HELP_STRING([--with-spark],[build for spark, yes or no]),
+	[spark=$withval],[spark=no])
+if test "$spark" = "yes"; then
+	AC_DEFINE([SPARK],[1],[Define to 1 for spark ])
+fi
+
 AC_ARG_WITH(dreambox,
 	AS_HELP_STRING([--with-dreambox],[build for dreambox, yes or no]),
 	[dreambox=$withval],[dreambox=no])
diff --git a/gstdvbaudiosink.c b/gstdvbaudiosink.c
index 2cd95b4..898a150 100644
--- a/gstdvbaudiosink.c
+++ b/gstdvbaudiosink.c
@@ -64,10 +64,6 @@
 #include <config.h>
 #endif
 
-#ifdef __sh__
-#include <linux/dvb/stm_ioctls.h>
-#endif
-
 #include <gst/gst.h>
 #include <gst/audio/audio.h>
 #include <gst/base/gstbasesink.h>
@@ -695,7 +691,11 @@ static gboolean gst_dvbaudiosink_set_caps(GstBaseSink *basesink, GstCaps *caps)
 		gint format = 0x01;
 		const gchar *formatstring = NULL;
 		gint width = 0, depth = 0, rate = 0, channels, block_align, byterate;
+#ifdef DAGS
+		self->codec_data = gst_buffer_new_and_alloc(18 + 8);
+#else
 		self->codec_data = gst_buffer_new_and_alloc(18);
+#endif
 		GstMapInfo map;
 		gst_buffer_map(self->codec_data, &map, GST_MAP_WRITE);
 		data = map.data;
@@ -725,6 +725,39 @@ static gboolean gst_dvbaudiosink_set_caps(GstBaseSink *basesink, GstCaps *caps)
 		byterate = channels * rate * width / 8;
 		block_align = channels * width / 8;
 		memset(data, 0, size);
+#ifdef DAGS
+		self->fixed_buffersize      =  rate * 30 / 1000;
+		self->fixed_buffersize      *= channels * depth / 8;
+		self->fixed_buffertimestamp =  GST_CLOCK_TIME_NONE;
+		self->fixed_bufferduration  =  GST_SECOND * (GstClockTime)self->fixed_buffersize / (GstClockTime)byterate;
+        memcpy(data,"BCMA",4);
+        data[4]  = (self->fixed_buffersize & 0xFF000000) >> 24;
+        data[5]  = (self->fixed_buffersize & 0xFF0000) >> 16; 
+        data[6]  = (self->fixed_buffersize & 0xFF00) >> 8; 
+        data[7]  = (self->fixed_buffersize & 0xFF);
+		/* format tag */
+		data[8]  = format & 0xff;
+		data[9]  = (format >> 8) & 0xff;
+		/* channels */
+		data[10] = channels & 0xff;
+		data[11] = (channels >> 8) & 0xff;
+		/* sample rate */
+		data[12] = rate & 0xff;
+		data[13] = (rate >> 8) & 0xff;
+		data[14] = (rate >> 16) & 0xff;
+		data[15] = (rate >> 24) & 0xff;
+		/* byte rate */
+		data[16] = byterate & 0xff;
+		data[17] = (byterate >> 8) & 0xff;
+		data[18] = (byterate >> 16) & 0xff;
+		data[19] = (byterate >> 24) & 0xff;
+		/* block align */
+		data[20] = block_align & 0xff;
+		data[21] = (block_align >> 8) & 0xff;
+		/* word size */
+		data[22] = depth & 0xff;
+		data[23] = (depth >> 8) & 0xff;
+#else
 		/* format tag */
 		*(data++) = format & 0xff;
 		*(data++) = (format >> 8) & 0xff;
@@ -751,6 +784,7 @@ static gboolean gst_dvbaudiosink_set_caps(GstBaseSink *basesink, GstCaps *caps)
 		self->fixed_buffersize *= channels * depth / 8;
 		self->fixed_buffertimestamp = GST_CLOCK_TIME_NONE;
 		self->fixed_bufferduration = GST_SECOND * (GstClockTime)self->fixed_buffersize / (GstClockTime)byterate;
+#endif
 		GST_INFO_OBJECT(self, "MIMETYPE %s", type);
 		bypass = AUDIOTYPE_RAW;
 		gst_buffer_unmap(self->codec_data, &map);
@@ -998,7 +1032,7 @@ static int audio_write(GstDVBAudioSink *self, GstBuffer *buffer, size_t start, s
 		{
 			GST_LOG_OBJECT(self, "going into poll, have %d bytes to write", len - written);
 		}
-#ifndef CHECK_DRAIN
+#if defined(__sh__) && !defined(CHECK_DRAIN)
 		pfd[1].revents = POLLOUT;
 #else
 		if (poll(pfd, 2, -1) < 0)
@@ -1505,7 +1539,7 @@ static gboolean gst_dvbaudiosink_stop(GstBaseSink * basesink)
 
 static GstStateChangeReturn gst_dvbaudiosink_change_state(GstElement *element, GstStateChange transition)
 {
-	GstStateChangeReturn ret = GST_STATE_CHANGE_FAILURE;
+	GstStateChangeReturn ret = GST_STATE_CHANGE_SUCCESS;
 	GstDVBAudioSink *self = GST_DVBAUDIOSINK(element);
 
 	switch(transition)
@@ -1537,6 +1571,14 @@ static GstStateChangeReturn gst_dvbaudiosink_change_state(GstElement *element, G
 		if (self->fd >= 0) ioctl(self->fd, AUDIO_CONTINUE);
 		self->paused = FALSE;
 		break;
+	default:
+		break;
+	}
+
+	ret = GST_ELEMENT_CLASS(parent_class)->change_state(element, transition);
+
+	switch(transition)
+	{
 	case GST_STATE_CHANGE_PLAYING_TO_PAUSED:
 		GST_INFO_OBJECT(self,"GST_STATE_CHANGE_PLAYING_TO_PAUSED");
 		self->paused = TRUE;
@@ -1557,7 +1599,6 @@ static GstStateChangeReturn gst_dvbaudiosink_change_state(GstElement *element, G
 		break;
 	}
 
-	ret = GST_ELEMENT_CLASS(parent_class)->change_state(element, transition);
 	return ret;
 }
 
diff --git a/gstdvbvideosink.c b/gstdvbvideosink.c
index 33f4f2f..bee9ef9 100644
--- a/gstdvbvideosink.c
+++ b/gstdvbvideosink.c
@@ -64,13 +64,11 @@
 #include <config.h>
 #endif
 
-#ifdef __sh__
-#include <linux/dvb/stm_ioctls.h>
-#endif
-
 #include <gst/gst.h>
 #include <gst/base/gstbasesink.h>
 
+#define PACK_UNPACKED_XVID_DIVX5_BITSTREAM
+
 #include "common.h"
 #include "gstdvbvideosink.h"
 #include "gstdvbsink-marshal.h"
@@ -124,6 +122,65 @@ static int readApiFrameRate(int fd, int *framerate)
 }
 #endif
 
+#ifdef PACK_UNPACKED_XVID_DIVX5_BITSTREAM
+struct bitstream
+{
+	guint8 *data;
+	guint8 last;
+	int avail;
+};
+
+void bitstream_init(struct bitstream *bit, const void *buffer, gboolean wr)
+{
+	bit->data = (guint8*) buffer;
+	if (wr) {
+		bit->avail = 0;
+		bit->last = 0;
+	}
+	else {
+		bit->avail = 8;
+		bit->last = *bit->data++;
+	}
+}
+
+unsigned long bitstream_get(struct bitstream *bit, int bits)
+{
+	unsigned long res = 0;
+	while (bits)
+	{
+		unsigned int d = bits;
+		if (!bit->avail)
+		{
+			bit->last = *bit->data++;
+			bit->avail = 8;
+		}
+		if (d > bit->avail)
+			d=bit->avail;
+		res<<=d;
+		res|=(bit->last>>(bit->avail-d))&~(-1<<d);
+		bit->avail -= d;
+		bits -= d;
+	}
+	return res;
+}
+
+void bitstream_put(struct bitstream *bit, unsigned long val, int bits)
+{
+	while (bits)
+	{
+		bit->last |= ((val & (1 << (bits-1))) ? 1 : 0) << (7 - bit->avail);
+		if (++bit->avail == 8)
+		{
+			*bit->data = bit->last;
+			++bit->data;
+			bit->last = 0;
+			bit->avail = 0;
+		}
+		--bits;
+	}
+}
+#endif
+
 GST_DEBUG_CATEGORY_STATIC (dvbvideosink_debug);
 #define GST_CAT_DEFAULT dvbvideosink_debug
 
@@ -337,6 +394,11 @@ static void gst_dvbvideosink_init(GstDVBVideoSink *self)
 	self->codec_data = NULL;
 	self->codec_type = CT_H264;
 	self->stream_type = STREAMTYPE_UNKNOWN;
+#ifdef PACK_UNPACKED_XVID_DIVX5_BITSTREAM
+	self->must_pack_bitstream = FALSE;
+	self->num_non_keyframes = 0;
+	self->prev_frame = NULL;
+#endif
 	self->paused = self->playing = self->unlocking = self->flushing = self->first_paused = FALSE;
 	self->pts_written = self->using_dts_downmix = FALSE;
 	self->lastpts = 0;
@@ -846,6 +908,88 @@ static GstFlowReturn gst_dvbvideosink_render(GstBaseSink *sink, GstBuffer *buffe
 			GST_TRACE_OBJECT(self, "data[%d] = %d :(", i, data[i]);
 	}
 
+#ifdef PACK_UNPACKED_XVID_DIVX5_BITSTREAM
+	gboolean commit_prev_frame_data = FALSE, cache_prev_frame = FALSE;
+#endif
+
+#ifdef PACK_UNPACKED_XVID_DIVX5_BITSTREAM
+	if (self->must_pack_bitstream)
+	{
+		cache_prev_frame = TRUE;
+		unsigned int pos = 0;
+		while (pos < data_len)
+		{
+			if (memcmp(&data[pos], "\x00\x00\x01", 3))
+			{
+				pos++;
+				continue;
+			}
+			pos += 3;
+			if ((data[pos++] & 0xF0) == 0x20)
+			{ // we need time_inc_res
+				gboolean low_delay=FALSE;
+				unsigned int ver_id = 1, shape=0, time_inc_res=0, tmp=0;
+				struct bitstream bit;
+				bitstream_init(&bit, data+pos, 0);
+				bitstream_get(&bit, 9);
+				if (bitstream_get(&bit, 1))
+				{
+					ver_id = bitstream_get(&bit, 4); // ver_id
+					bitstream_get(&bit, 3);
+				}
+				if ((tmp = bitstream_get(&bit, 4)) == 15)
+				{ // Custom Aspect Ration
+					bitstream_get(&bit, 8); // skip AR width
+					bitstream_get(&bit, 8); // skip AR height
+				}
+				if (bitstream_get(&bit, 1))
+				{
+					bitstream_get(&bit, 2);
+					low_delay = bitstream_get(&bit, 1) ? TRUE : FALSE;
+					if (bitstream_get(&bit, 1))
+					{
+						bitstream_get(&bit, 32);
+						bitstream_get(&bit, 32);
+						bitstream_get(&bit, 15);
+					}
+				}
+				shape = bitstream_get(&bit, 2);
+				if (ver_id != 1 && shape == 3 /* Grayscale */) bitstream_get(&bit, 4);
+				bitstream_get(&bit, 1);
+				time_inc_res = bitstream_get(&bit, 16);
+				self->time_inc_bits = 0;
+				while (time_inc_res)
+				{ // count bits
+					++self->time_inc_bits;
+					time_inc_res >>= 1;
+				}
+			}
+		}
+	}
+
+	if (self->must_pack_bitstream)
+	{
+		int tmp1, tmp2;
+		unsigned char c1, c2;
+		unsigned int pos = 0;
+		while (pos < data_len)
+		{
+			if (memcmp(&data[pos], "\x00\x00\x01\xb2", 4))
+			{
+				pos++;
+				continue;
+			}
+			pos += 4;
+			if (data_len - pos < 13) break;
+			if (sscanf((char*)data+pos, "DivX%d%c%d%cp", &tmp1, &c1, &tmp2, &c2) == 4 && (c1 == 'b' || c1 == 'B') && (c2 == 'p' || c2 == 'P')) 
+			{
+				GST_DEBUG_OBJECT (self, "%s seen... already packed!", (char*)data+pos);
+				self->must_pack_bitstream = FALSE;
+				break;
+			}
+		}
+	}
+#endif
 	pes_header[0] = 0;
 	pes_header[1] = 0;
 	pes_header[2] = 1;
@@ -973,8 +1117,115 @@ static GstFlowReturn gst_dvbvideosink_render(GstBaseSink *sink, GstBuffer *buffe
 		}
 	}
 
+#ifdef PACK_UNPACKED_XVID_DIVX5_BITSTREAM
+	if (self->must_pack_bitstream)
+	{
+		unsigned int pos = 0;
+		gboolean i_frame = FALSE;
+		while (pos < data_len)
+		{
+			if (memcmp(&data[pos], "\x00\x00\x01\xb6", 4))
+			{
+				pos++;
+				continue;
+			}
+			pos += 4;
+			switch ((data[pos] & 0xC0) >> 6)
+			{
+				case 0: // I-Frame
+					cache_prev_frame = FALSE;
+					i_frame = TRUE;
+				case 1: // P-Frame
+					if (self->prev_frame != buffer)
+					{
+						struct bitstream bit;
+						gboolean store_frame=FALSE;
+						if (self->prev_frame)
+						{
+							if (!self->num_non_keyframes)
+							{
+								ret = gst_dvbvideosink_render(sink, self->prev_frame);
+								gst_buffer_unref(self->prev_frame);
+								self->prev_frame = NULL;
+								if (ret != GST_FLOW_OK)
+									goto error;
+								store_frame = TRUE;
+							}
+							else
+							{
+								pes_header[pes_header_len++] = 0;
+								pes_header[pes_header_len++] = 0;
+								pes_header[pes_header_len++] = 1;
+								pes_header[pes_header_len++] = 0xB6;
+								bitstream_init(&bit, pes_header+pes_header_len, 1);
+								bitstream_put(&bit, 1, 2);
+								bitstream_put(&bit, 0, 1);
+								bitstream_put(&bit, 1, 1);
+								bitstream_put(&bit, self->time_inc, self->time_inc_bits);
+								bitstream_put(&bit, 1, 1);
+								bitstream_put(&bit, 0, 1);
+								bitstream_put(&bit, 0x7F >> bit.avail, 8 - bit.avail);
+								data_len = 0;
+								pes_header_len += bit.data - (pes_header+pes_header_len);
+								cache_prev_frame = TRUE;
+							}
+						}
+						else if (!i_frame)
+						{
+							store_frame = TRUE;
+						}
+
+						self->num_non_keyframes=0;
+
+						// extract time_inc
+						bitstream_init(&bit, data+pos, 0);
+						bitstream_get(&bit, 2); // skip coding_type
+						while (bitstream_get(&bit, 1));
+						bitstream_get(&bit, 1);
+						self->time_inc = bitstream_get(&bit, self->time_inc_bits);
+
+						if (store_frame)
+						{
+							self->prev_frame = buffer;
+							gst_buffer_ref(buffer);
+							goto ok;
+						}
+					}
+					else
+					{
+						cache_prev_frame = FALSE;
+					}
+					break;
+				case 3: // S-Frame
+				case 2: // B-Frame
+					if (++self->num_non_keyframes == 1 && self->prev_frame)
+					{
+						commit_prev_frame_data = TRUE;
+					}
+					break;
+				case 4: // N-Frame
+				default:
+					g_warning("unhandled divx5/xvid frame type %d\n", (data[pos] & 0xC0) >> 6);
+					break;
+			}
+		}
+	}
+#endif
+
 	payload_len = data_len + pes_header_len - 6;
 
+#ifdef PACK_UNPACKED_XVID_DIVX5_BITSTREAM
+	if (self->prev_frame && self->prev_frame != buffer)
+	{
+		pes_set_pts(GST_BUFFER_PTS_IS_VALID(self->prev_frame) ? GST_BUFFER_PTS(self->prev_frame) : GST_BUFFER_DTS(self->prev_frame), pes_header);
+	}
+
+	if (commit_prev_frame_data)
+	{
+		payload_len += gst_buffer_get_size(self->prev_frame);
+	}
+#endif
+
 	if (self->codec_type == CT_MPEG2 || self->codec_type == CT_MPEG1)
 	{
 		if (!self->codec_data && data_len > 3 && !memcmp(data, "\x00\x00\x01\xb3", 4))
@@ -1085,6 +1336,26 @@ static GstFlowReturn gst_dvbvideosink_render(GstBaseSink *sink, GstBuffer *buffe
 
 	if (video_write(sink, self, self->pesheader_buffer, 0, pes_header_len) < 0) goto error;
 
+#ifdef PACK_UNPACKED_XVID_DIVX5_BITSTREAM
+	if (commit_prev_frame_data)
+	{
+		gsize prev_frame_size;
+		prev_frame_size = gst_buffer_get_size(self->prev_frame);
+		if (video_write(sink, self, self->prev_frame, 0, prev_frame_size) < 0) goto error;
+	}
+
+	if (self->prev_frame && self->prev_frame != buffer)
+	{
+		gst_buffer_unref(self->prev_frame);
+		self->prev_frame = NULL;
+	}
+
+	if (cache_prev_frame)
+	{
+		gst_buffer_ref(buffer);
+		self->prev_frame = buffer;
+	}
+#endif
 	if (video_write(sink, self, buffer, data - original_data, (data - original_data) + data_len) < 0) goto error;
 
 	if (GST_BUFFER_PTS_IS_VALID(buffer) || GST_BUFFER_DTS_IS_VALID(buffer))
@@ -1113,6 +1384,13 @@ error:
 	{
 		gst_buffer_unmap(self->codec_data, &codecdatamap);
 	}
+#ifdef PACK_UNPACKED_XVID_DIVX5_BITSTREAM
+	if (self->prev_frame && self->prev_frame != buffer)
+	{
+		gst_buffer_unref(self->prev_frame);
+		self->prev_frame = NULL;
+	}
+#endif
 	if (tmpbuf)
 	{
 		gst_buffer_unref(tmpbuf);
@@ -1133,7 +1411,7 @@ static gboolean gst_dvbvideosink_set_caps(GstBaseSink *basesink, GstCaps *caps)
 	const char *mimetype = gst_structure_get_name (structure);
 	t_stream_type prev_stream_type = self->stream_type;
 	self->stream_type = STREAMTYPE_UNKNOWN;
-	//self->must_send_header = TRUE;
+	self->must_send_header = TRUE;
 
 	GST_INFO_OBJECT (self, "caps = %" GST_PTR_FORMAT, caps);
 
@@ -1368,6 +1646,9 @@ static gboolean gst_dvbvideosink_set_caps(GstBaseSink *basesink, GstCaps *caps)
 	{
 		self->stream_type = STREAMTYPE_XVID;
 		self->codec_type = CT_MPEG4_PART2;
+#ifdef PACK_UNPACKED_XVID_DIVX5_BITSTREAM
+		self->must_pack_bitstream = TRUE;
+#endif
 		GST_INFO_OBJECT (self, "MIMETYPE video/x-xvid -> STREAMTYPE_XVID");
 	}
 	else if (!strcmp (mimetype, "video/x-divx") || !strcmp (mimetype, "video/x-msmpeg"))
@@ -1429,6 +1710,9 @@ static gboolean gst_dvbvideosink_set_caps(GstBaseSink *basesink, GstCaps *caps)
 			case 5:
 				self->stream_type = STREAMTYPE_DIVX5;
 				GST_INFO_OBJECT (self, "MIMETYPE video/x-divx vers. %d -> STREAMTYPE_DIVX5", divxversion);
+#ifdef PACK_UNPACKED_XVID_DIVX5_BITSTREAM
+				self->must_pack_bitstream = TRUE;
+#endif
 			break;
 			default:
 				GST_ELEMENT_ERROR (self, STREAM, FORMAT, (NULL), ("unhandled divx version %i", divxversion));
@@ -1690,6 +1974,14 @@ static gboolean gst_dvbvideosink_stop(GstBaseSink *basesink)
 		self->pesheader_buffer = NULL;
 	}
 
+#ifdef PACK_UNPACKED_XVID_DIVX5_BITSTREAM
+	if (self->prev_frame)
+	{
+		gst_buffer_unref(self->prev_frame);
+		self->prev_frame = NULL;
+	}
+#endif
+
 	while (self->queue)
 	{
 		queue_pop(&self->queue);
@@ -1719,7 +2011,7 @@ static gboolean gst_dvbvideosink_stop(GstBaseSink *basesink)
 
 static GstStateChangeReturn gst_dvbvideosink_change_state(GstElement *element, GstStateChange transition)
 {
-	GstStateChangeReturn ret = GST_STATE_CHANGE_FAILURE;
+	GstStateChangeReturn ret = GST_STATE_CHANGE_SUCCESS;
 	GstDVBVideoSink *self = GST_DVBVIDEOSINK (element);
 	FILE *f;
 
@@ -1787,6 +2079,14 @@ static GstStateChangeReturn gst_dvbvideosink_change_state(GstElement *element, G
 		self->first_paused = FALSE;
 		self->paused = FALSE;
 		break;
+	default:
+		break;
+	}
+
+	ret = GST_ELEMENT_CLASS(parent_class)->change_state(element, transition);
+
+	switch (transition)
+	{
 	case GST_STATE_CHANGE_PLAYING_TO_PAUSED:
 		GST_INFO_OBJECT (self,"GST_STATE_CHANGE_PLAYING_TO_PAUSED");
 		self->paused = TRUE;
@@ -1804,7 +2104,6 @@ static GstStateChangeReturn gst_dvbvideosink_change_state(GstElement *element, G
 		break;
 	}
 
-	ret = GST_ELEMENT_CLASS(parent_class)->change_state(element, transition);
 	return ret;
 }
 
