diff --git a/gstdvbaudiosink.c b/gstdvbaudiosink.c
index 3a92624..d105729 100644
--- a/gstdvbaudiosink.c
+++ b/gstdvbaudiosink.c
@@ -711,7 +711,11 @@ static gboolean gst_dvbaudiosink_set_caps(GstBaseSink *basesink, GstCaps *caps)
 		const gchar *formatstring = NULL;
 #endif
 		gint width = 0, depth = 0, rate = 0, channels, block_align, byterate;
-		self->codec_data = gst_buffer_new_and_alloc(18);
+#ifdef DAGS                
+		self->codec_data = gst_buffer_new_and_alloc(18+8);
+#else
+                self->codec_data = gst_buffer_new_and_alloc(18);
+#endif
 #if GST_VERSION_MAJOR < 1
 		data = GST_BUFFER_DATA(self->codec_data);
 		size = GST_BUFFER_SIZE(self->codec_data);
@@ -751,6 +755,39 @@ static gboolean gst_dvbaudiosink_set_caps(GstBaseSink *basesink, GstCaps *caps)
 		byterate = channels * rate * width / 8;
 		block_align = channels * width / 8;
 		memset(data, 0, size);
+#ifdef DAGS
+                self->fixed_buffersize      =  rate * 30 / 1000;
+                self->fixed_buffersize      *= channels * depth / 8;
+                self->fixed_buffertimestamp =  GST_CLOCK_TIME_NONE;
+                self->fixed_bufferduration  =  GST_SECOND * (GstClockTime)self->fixed_buffersize / (GstClockTime)byterate;
+                memcpy(data,"BCMA",4);
+                data[4]  = (self->fixed_buffersize & 0xFF000000) >> 24;
+                data[5]  = (self->fixed_buffersize & 0xFF0000) >> 16; 
+                data[6]  = (self->fixed_buffersize & 0xFF00) >> 8; 
+                data[7]  = (self->fixed_buffersize & 0xFF);
+                /* format tag */
+                data[8]  = format & 0xff;
+                data[9]  = (format >> 8) & 0xff;
+                /* channels */
+                data[10] = channels & 0xff;
+                data[11] = (channels >> 8) & 0xff;
+                /* sample rate */
+                data[12] = rate & 0xff;
+                data[13] = (rate >> 8) & 0xff;
+                data[14] = (rate >> 16) & 0xff;
+                data[15] = (rate >> 24) & 0xff;
+                /* byte rate */
+                data[16] = byterate & 0xff;
+                data[17] = (byterate >> 8) & 0xff;
+                data[18] = (byterate >> 16) & 0xff;
+                data[19] = (byterate >> 24) & 0xff;
+                /* block align */
+                data[20] = block_align & 0xff;
+                data[21] = (block_align >> 8) & 0xff;
+                /* word size */
+                data[22] = depth & 0xff;
+                data[23] = (depth >> 8) & 0xff;
+#endif
 		/* format tag */
 		*(data++) = format & 0xff;
 		*(data++) = (format >> 8) & 0xff;
@@ -777,6 +814,7 @@ static gboolean gst_dvbaudiosink_set_caps(GstBaseSink *basesink, GstCaps *caps)
 		self->fixed_buffersize *= channels * depth / 8;
 		self->fixed_buffertimestamp = GST_CLOCK_TIME_NONE;
 		self->fixed_bufferduration = GST_SECOND * (GstClockTime)self->fixed_buffersize / (GstClockTime)byterate;
+                
 		GST_INFO_OBJECT(self, "MIMETYPE %s", type);
 		bypass = AUDIOTYPE_RAW;
 #if GST_VERSION_MAJOR >= 1
