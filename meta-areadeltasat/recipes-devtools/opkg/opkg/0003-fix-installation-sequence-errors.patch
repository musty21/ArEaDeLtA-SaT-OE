diff --git a/libopkg/opkg_download.c b/libopkg/opkg_download.c
index 480ae02..0f15206 100644
--- a/libopkg/opkg_download.c
+++ b/libopkg/opkg_download.c
@@ -505,8 +505,8 @@ int opkg_prepare_url_for_install(const char *url, char **namep)
     }
 
     /* Can't find anything matching the requested URL. */
-    opkg_msg(ERROR, "Couldn't find anything to satisfy '%s'.\n", url);
-    r = -1;
+    opkg_msg(NOTICE, "Couldn't find anything to satisfy '%s'.\n", url);
+    r = 0;
 
 CLEANUP:
     free(pkg_name);
diff --git a/libopkg/opkg_install.c b/libopkg/opkg_install.c
index 30d68d2..23602f8 100644
--- a/libopkg/opkg_install.c
+++ b/libopkg/opkg_install.c
@@ -226,12 +226,20 @@ static int prerm_upgrade_old_pkg(pkg_t * pkg, pkg_t * old_pkg)
 
     sprintf_alloc(&script_args, "upgrade %s", new_version);
     free(new_version);
-    err = pkg_run_script(old_pkg, "prerm", script_args);
+    // Busybox needs special care: Do not execute the prerm script
+    // of busybox or all following packages will fail
+    if ((strlen(old_pkg->name) >= 7) && (strncmp(old_pkg->name, "busybox", 7) == 0)) {
+        opkg_msg(NOTICE, "Skipping prerm script for package \"%s\"\n",
+                 old_pkg->name);
+        err = 0;
+    } else {
+        err = pkg_run_script(old_pkg, "prerm", script_args);
+    }
     free(script_args);
     if (err != 0) {
-        opkg_msg(ERROR, "prerm script for package \"%s\" failed\n",
+         opkg_msg(NOTICE, "prerm script for package \"%s\" failed\n",
                  old_pkg->name);
-        return -1;
+        return 0;
     }
     return 0;
 }
@@ -647,12 +655,20 @@ static int postrm_upgrade_old_pkg(pkg_t * pkg, pkg_t * old_pkg)
 
     sprintf_alloc(&script_args, "upgrade %s", new_version);
     free(new_version);
-    err = pkg_run_script(old_pkg, "postrm", script_args);
+    // Busybox needs special care: Do not execute the postrm script
+    // of busybox or all following packages will fail
+    if ((strlen(old_pkg->name) >= 7) && (strncmp(old_pkg->name, "busybox", 7) == 0)) {
+        opkg_msg(NOTICE, "Skipping postrm script for package \"%s\"\n",
+                 old_pkg->name);
+        err = 0;
+    } else {
+        err = pkg_run_script(old_pkg, "postrm", script_args);
+    }
     free(script_args);
     if (err != 0) {
-        opkg_msg(ERROR, "postrm script for package \"%s\" failed\n",
+        opkg_msg(NOTICE, "postrm script for package \"%s\" failed\n",
                  old_pkg->name);
-        return -1;
+        return 0;
     }
     return 0;
 }
@@ -931,6 +947,10 @@ int opkg_install_pkg(pkg_t * pkg)
         }
     }
 
+    err = preinst_configure(pkg, old_pkg);
+    if (err)
+        goto UNWIND_PREINST_CONFIGURE;
+
     err = update_file_ownership(pkg, old_pkg);
     if (err)
         return -1;
@@ -948,9 +968,6 @@ int opkg_install_pkg(pkg_t * pkg)
     err = prerm_upgrade_old_pkg(pkg, old_pkg);
     if (err)
         goto UNWIND_PRERM_UPGRADE_OLD_PKG;
-    err = preinst_configure(pkg, old_pkg);
-    if (err)
-        goto UNWIND_PREINST_CONFIGURE;
 
     err = backup_modified_conffiles(pkg, old_pkg);
     if (err)
@@ -964,6 +981,7 @@ int opkg_install_pkg(pkg_t * pkg)
     if (err)
         goto UNWIND_POSTRM_UPGRADE_OLD_PKG;
 
+
     if (opkg_config->noaction)
         return 0;
 
@@ -1044,14 +1062,14 @@ int opkg_install_pkg(pkg_t * pkg)
     sigprocmask(SIG_UNBLOCK, &newset, &oldset);
     return 0;
 
+ UNWIND_PREINST_CONFIGURE:
+    preinst_configure_unwind(pkg, old_pkg);
  UNWIND_POSTRM_UPGRADE_OLD_PKG:
     postrm_upgrade_old_pkg_unwind(pkg, old_pkg);
  UNWIND_CHECK_DATA_FILE_CLASHES:
     check_data_file_clashes_unwind(pkg, old_pkg);
  UNWIND_BACKUP_MODIFIED_CONFFILES:
     backup_modified_conffiles_unwind(pkg, old_pkg);
- UNWIND_PREINST_CONFIGURE:
-    preinst_configure_unwind(pkg, old_pkg);
  UNWIND_PRERM_UPGRADE_OLD_PKG:
     prerm_upgrade_old_pkg_unwind(pkg, old_pkg);
  pkg_is_hosed:
