diff --git a/xbmc/input/InputManager.cpp b/xbmc/input/InputManager.cpp
index 80c89f0..0bfc41d 100644
--- a/xbmc/input/InputManager.cpp
+++ b/xbmc/input/InputManager.cpp
@@ -511,6 +511,18 @@ bool CInputManager::OnKey(const CKey& key)
           useKeyboard = true;
       }
     }
+#if defined(HAS_E2_REMOTE)
+    switch(key.GetVKey()) {
+      case 0x0d:
+      case 0x80:
+      case 0x81:
+      case 0x82:
+      case 0x83:
+        if (iWin == WINDOW_DIALOG_KEYBOARD)
+          useKeyboard = false;
+        break;
+    }
+#endif
     if (useKeyboard)
     {
       // use the virtualkeyboard section of the keymap, and send keyboard-specific or navigation
diff --git a/xbmc/input/linux/LinuxInputDevices.cpp b/xbmc/input/linux/LinuxInputDevices.cpp
index ef0d494..0cf7a40 100644
--- a/xbmc/input/linux/LinuxInputDevices.cpp
+++ b/xbmc/input/linux/LinuxInputDevices.cpp
@@ -27,6 +27,9 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
+
+#define VKEY_ENABLE (0)
+
 #include "system.h"
 #if defined(HAS_LINUX_EVENTS)
 
@@ -276,6 +279,30 @@ KeyMap keyMap[] = {
   { 378               , XBMCK_RIGHT       }, // Green
   { 381               , XBMCK_UP          }, // Yellow
   { 366               , XBMCK_DOWN        }, // Blue
+#if defined(HAS_E2_REMOTE)
+  { KEY_OK            , XBMCK_RETURN      }, // Ok
+  { KEY_EXIT          , XBMCK_ESCAPE      }, // EXIT
+  { KEY_INFO          , XBMCK_i           }, // Info
+  { KEY_SUBTITLE      , XBMCK_l           }, // Subtitle
+  { KEY_TV            , XBMCK_z           }, // TV
+  { KEY_TV2           , XBMCK_z           }, // TV/RADIO
+  { KEY_RADIO         , XBMCK_j           }, // Radio
+  { KEY_AUDIO         , XBMCK_a           }, // Audio
+  { KEY_NEXT          , XBMCK_MEDIA_NEXT_TRACK }, // Next
+  { KEY_PREVIOUS      , XBMCK_MEDIA_PREV_TRACK }, // Prev
+  { KEY_CHANNELUP     , XBMCK_PAGEUP      }, // PageUp
+  { KEY_CHANNELDOWN   , XBMCK_PAGEDOWN    }, // PageDown
+  { KEY_VIDEO         , XBMCK_c           }, // Playlist
+  { KEY_LIST          , XBMCK_c           }, // Playlist
+  { 438               , XBMCK_TAB         }, // Context
+  { KEY_BOOKMARKS     , XBMCK_TAB         }, // Portal
+  { 227               , XBMCK_z           }, // Aspectratio
+  { KEY_PROGRAM       , XBMCK_o           }, // Timer
+  { 398               , XBMCK_F1          }, // Red
+  { 399               , XBMCK_F2          }, // Green
+  { 400               , XBMCK_F3          }, // Yellow
+  { 401               , XBMCK_F4          }, // Blue
+#endif
 };
 
 typedef enum
@@ -553,9 +580,17 @@ bool CLinuxInputDevice::KeyEvent(const struct input_event& levt, XBMC_Event& dev
 
     KeymapEntry entry;
     entry.code = code;
+
+    int keyMapValue;
+#if defined(HAS_E2_REMOTE)
+    if (devt.key.keysym.mod & (XBMCKMOD_SHIFT | XBMCKMOD_CAPS)) keyMapValue = entry.shift;
+    else if (devt.key.keysym.mod & XBMCKMOD_ALT) keyMapValue = entry.alt;
+    else if (devt.key.keysym.mod & XBMCKMOD_META) keyMapValue = entry.altShift;
+    else keyMapValue = entry.base;
+    devt.key.keysym.unicode = devt.key.keysym.sym;
+#else
     if (GetKeymapEntry(entry))
     {
-      int keyMapValue;
       if (devt.key.keysym.mod & (XBMCKMOD_SHIFT | XBMCKMOD_CAPS)) keyMapValue = entry.shift;
       else if (devt.key.keysym.mod & XBMCKMOD_ALT) keyMapValue = entry.alt;
       else if (devt.key.keysym.mod & XBMCKMOD_META) keyMapValue = entry.altShift;
@@ -570,6 +605,7 @@ bool CLinuxInputDevice::KeyEvent(const struct input_event& levt, XBMC_Event& dev
         }
       }
     }
+#endif
   }
 
   return true;
@@ -858,6 +894,12 @@ XBMC_Event CLinuxInputDevice::ReadEvent()
         break;
       }
 
+#if defined(HAS_V3D)
+      if (access("/tmp/playing.lock", F_OK) == 0) {
+        break;
+      }
+#endif
+
       //printf("read event readlen = %d device name %s m_fileName %s\n", readlen, m_deviceName, m_fileName.c_str());
 
       // sanity check if we realy read the event
@@ -1195,6 +1237,7 @@ bool CLinuxInputDevices::CheckDevice(const char *device)
     return false;
   }
 
+#if !defined(HAS_V3D)
   if (ioctl(fd, EVIOCGRAB, 1) && errno != EINVAL)
   {
     close(fd);
@@ -1202,6 +1245,7 @@ bool CLinuxInputDevices::CheckDevice(const char *device)
   }
 
   ioctl(fd, EVIOCGRAB, 0);
+#endif
 
   close(fd);
 
@@ -1294,6 +1338,7 @@ bool CLinuxInputDevice::Open()
     return false;
   }
 
+#if !defined(HAS_V3D)
   /* grab device */
   ret = ioctl(fd, EVIOCGRAB, 1);
   if (ret && errno != EINVAL)
@@ -1302,6 +1347,7 @@ bool CLinuxInputDevice::Open()
     close(fd);
     return false;
   }
+#endif
 
   // Set the socket to non-blocking
   int opts = 0;
@@ -1369,7 +1415,9 @@ bool CLinuxInputDevice::Open()
 
 driver_open_device_error:
 
+#if !defined(HAS_V3D)
   ioctl(fd, EVIOCGRAB, 0);
+#endif
   if (m_vt_fd >= 0)
   {
     close(m_vt_fd);
@@ -1443,8 +1491,10 @@ bool CLinuxInputDevice::GetKeymapEntry(KeymapEntry& entry)
  */
 void CLinuxInputDevice::Close()
 {
+#if !defined(HAS_V3D)
   /* release device */
   ioctl(m_fd, EVIOCGRAB, 0);
+#endif
 
   if (m_vt_fd >= 0)
     close(m_vt_fd);
